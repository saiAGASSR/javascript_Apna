login in and non logged in 

let content;

if(loggedIn){
    content = <Dashboard  />
}else 
{
    content =<LoginForm />
}

return(
    <div>
          {content}
    </div>
    
)

<div>
{
    loggedIn ?
        ( <Dashboard  /> )
            : 
        (<LoginForm />)

} 
</div>

<div>  {  loggedIn && <Dashboard /> } </div>


mycode
const products = [
  { title: 'Cabbage', id: 1 },
  { title: 'Garlic', id: 2 },
  { title: 'Apple', id: 3 },
]; 

function  arrayLi() {

 return (
    <>

    products.foreach((el)=>{
        <li  key={el.id}  >   { el.title }  <li/> 
     })

    </>
 )   

}


https://docs.vultr.com/javascript/standard-library/Array/forEach?ref=9141994&utm_source=performance-max-apac&utm_medium=paidmedia&obility_id=16876059738&&utm_campaign=APAC_-_India_-_Performance_Max_-_1001&utm_term=&utm_content=&ref=9141994&gad_source=1&gclid=CjwKCAiA74G9BhAEEiwA8kNfpQKQSX65X2fLYPT3_jDK55FRN82S5arFEPAs6vWUDQPXbBn2fb8fpRoC4cgQAvD_BwE


Use Promise.all with map() for asynchronous operations instead.

const urls = ['url1', 'url2', 'url3'];
const fetchPromises = urls.map(url => fetch(url));

Promise.all(fetchPromises)
    .then(responses => responses.forEach(response => console.log(response.status)))
    .catch(error => console.error('Failed to fetch:', error));



Rendering lists 
You will rely on JavaScript features like for loop and the array map() function to render lists of components.

For example, letâ€™s say you have an array of products:
const products = [
  { title: 'Cabbage', id: 1 },
  { title: 'Garlic', id: 2 },
  { title: 'Apple', id: 3 },
];

Inside your component, use the map() function to transform an array of products into an array of <li> items:

const listItems = products.map(product =>
  <li key={product.id}>
    {product.title}
  </li>
);

return (
  <ul>{listItems}</ul>
);

Notice how <li> has a key attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.


const products = [
  { title: 'Cabbage', isFruit: false, id: 1 },
  { title: 'Garlic', isFruit: false, id: 2 },
  { title: 'Apple', isFruit: true, id: 3 },
];

const listItemss = product.map((item)=>{
    <li key={item.id} 
        style={{ color : item.isFruit? "magenta" : "black" }}
    >
        {item.title}
    </li>
})

function listItems(){
    return  <ul> listItemss </ul>
}