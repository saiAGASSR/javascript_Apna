please tell me the mistakes i have done from starting 

1. Issue in .map() ‚Äì Not Returning JSX Properly
Your code:

{toDo.map((el) =>  {
    <li>el</li>
})}


Mistakes:
You used {} inside .map(), but did not include a return statement.
<li>el</li> should be <li>{el}</li> to properly display the variable inside JSX.
Fix:
‚úÖ Use () instead of {} to implicitly return JSX:

‚úÖ OR, if using {}, explicitly return JSX:

{toDo.map((el, index) => {  
    return <li key={index}>{el}</li>;  
})}


2. Missing key Prop in <li>
Your Code:
jsx
Copy
Edit

{toDo.map((el) => (
    <li>{el}</li>
))}

Mistake:
React requires a key prop for elements inside .map() to track them efficiently.
Fix:
‚úÖ Add key={index} to <li>:

jsx
Copy
Edit

{toDo.map((el, index) => (
    <li key={index}>{el}</li>
))}

Why? Without key, React may inefficiently update or reorder the list.

const handleToDo = (event) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    setToDo((prevToDo) => [...prevToDo, formData.get("action")]);
};

Mistake:
After adding a new to-do, the input field does not clear automatically.

Fix:
‚úÖ Add event.currentTarget.reset(); to clear the input after submission:

const handleToDo = (event) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const action = formData.get("action");

    if (action.trim()) {
        setToDo((prevToDo) => [...prevToDo, action]);
    }

    event.currentTarget.reset(); // Clears the input field
};

4. Allowing Empty To-Do Items
Your Code:
setToDo((prevToDo) => [...prevToDo, formData.get("action")]);
Mistake:
If the user submits an empty string (just pressing "Add" without typing), it gets added to the list.
Fix:
‚úÖ Use .trim() to prevent empty values:
const action = formData.get("action");

if (action.trim()) {  
    setToDo((prevToDo) => [...prevToDo, action]);
}

5. Missing type="submit" in <button>
Your Code:
<button> add</button>

Mistake:
If <button> is inside a <form>, it should explicitly have type="submit" to ensure proper form submission.
Fix:
‚úÖ Add type="submit" to <button>:

jsx

<button type="submit">Add</button>

"use client";

import { useState } from "react";

const Todo = () => {
  const [toDo, setToDo] = useState(["sample"]);

  const handleToDo = (event) => {
    event.preventDefault();

    const formData = new FormData(event.currentTarget);
    const action = formData.get("action");

    if (action.trim()) {
      setToDo((prevToDo) => [...prevToDo, action]);
    }

    event.currentTarget.reset(); // Clears the input field
  };

  return (
    <>
      <div>
        <form onSubmit={handleToDo}>
          <input type="text" name="action" />
          <button type="submit">Add</button>
        </form>
      </div>

      <ul>
        <h3>Your To-Do List</h3>
        {toDo.map((el, index) => (
          <li key={index}>{el}</li>
        ))}
      </ul>
    </>
  );
};

export default Todo;

Summary of Your Mistakes:
1Ô∏è‚É£ Did not return JSX inside .map()
2Ô∏è‚É£ Did not use a key prop in .map()
3Ô∏è‚É£ Form input did not reset after submission
4Ô∏è‚É£ Allowed empty to-do items
5Ô∏è‚É£ Did not specify type="submit" in the button

Now your to-do app should work perfectly! üöÄ




Missing type="submit" in <button>
I have addded form onsubmit right 

Yes, you have correctly added onSubmit to the <form>, which means the button will still submit the form even without explicitly specifying type="submit".

However, it's a best practice to explicitly set type="submit" to avoid unexpected behavior, especially when working with multiple buttons inside the same form.

Why is type="submit" Important?
Default Behavior of <button>

If <button> is inside a <form>, its default type is "submit".
If <button> is outside a <form>, its default type is "button", meaning it won't submit anything.
Avoiding Issues with Multiple Buttons

If you later add another button (e.g., a "Clear" button), it may unintentionally submit the form unless you explicitly set its type (type="button").
Readability & Maintainability

Explicitly specifying type="submit" makes it clear to other developers that this button is meant to submit the form.

Your Original Code (Works but Implicit)
<button> add</button>  // Implicitly acts as type="submit"

<button type="submit">Add</button>  // Explicitly declares the submit action

When Should You Use type="button"?
If you ever add a button that should NOT submit the form, explicitly set:
<button type="button">Clear</button>  // This will NOT submit the form

Conclusion
Your original code will work, but adding type="submit" is a good habit to avoid unintended issues in the future. üöÄ




In react if we add value attribute 
we should add onChange handler



When we want to delete anything from an array we use filter method . 

React Doc
https://react.dev/learn/updating-arrays-in-state